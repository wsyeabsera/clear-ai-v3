scalar JSON

type Query {
  """
  List all available MCP tools
  """
  listTools: [Tool!]!
  
  """
  Get a plan by request ID
  """
  getPlan(requestId: String!): PlanResponse
  
  """
  Get plan statistics
  """
  getPlanStatistics: PlanStatistics!
  
  """
  Get recent plans
  """
  getRecentPlans(limit: Int): [PlanSummary!]!
  
  # Execution Agent Queries
  """
  Get an execution by execution ID
  """
  getExecution(executionId: String!): ExecutionResponse
  
  """
  Get executions by plan request ID
  """
  getExecutionsByPlanId(planRequestId: String!): [ExecutionSummary!]!
  
  """
  List recent executions
  """
  getRecentExecutions(limit: Int): [ExecutionSummary!]!
  
  """
  Get execution statistics
  """
  getExecutionStatistics: ExecutionStatistics!
}

type Mutation {
  """
  Execute an MCP tool dynamically by name with parameters
  """
  executeTool(name: String!, params: JSON!): ToolResult!
  
  """
  Create a new plan for a given query
  """
  createPlan(query: String!, llmProvider: String): PlanResponse!
  
  """
  Delete a plan by request ID
  """
  deletePlan(requestId: String!): Boolean!
  
  # Execution Agent Mutations
  """
  Execute a plan by plan request ID
  """
  executePlan(
    planRequestId: String!
    config: ExecutionConfigInput
  ): ExecutionResponse!
  
  """
  Cancel a running execution
  """
  cancelExecution(executionId: String!): Boolean!
  
  """
  Retry a failed execution
  """
  retryExecution(executionId: String!): ExecutionResponse!
}

type Tool {
  name: String!
  description: String!
  inputSchema: JSON!
}

type ToolResult {
  success: Boolean!
  data: JSON
  error: String
  message: String
  meta: JSON
}

# Planner Agent Types

type PlanResponse {
  requestId: String!
  query: String!
  plan: Plan!
  status: PlanStatus!
  createdAt: String!
  executionTimeMs: Int
  validationErrors: [String!]!
}

type Plan {
  steps: [PlanStep!]!
  metadata: PlanMetadata!
}

type PlanStep {
  tool: String!
  params: JSON!
  dependsOn: [Int!]!
  parallel: Boolean!
  description: String
}

type PlanMetadata {
  query: String!
  requestId: String!
  estimatedDurationMs: Int
  totalSteps: Int!
  parallelSteps: Int!
}

type PlanSummary {
  requestId: String!
  query: String!
  status: PlanStatus!
  createdAt: String!
  executionTimeMs: Int
}

type PlanStatistics {
  total: Int!
  byStatus: PlanStatusCounts!
  byProvider: [ProviderCount!]!
  averageExecutionTime: Float!
}

type PlanStatusCounts {
  PENDING: Int!
  COMPLETED: Int!
  FAILED: Int!
}

type ProviderCount {
  provider: String!
  count: Int!
}

enum PlanStatus {
  PENDING
  COMPLETED
  FAILED
}

# Execution Agent Types

type ExecutionResponse {
  executionId: String!
  planRequestId: String!
  status: ExecutionStatus!
  startedAt: String
  completedAt: String
  totalSteps: Int!
  completedSteps: Int!
  failedSteps: Int!
  results: [ExecutionStepResult!]!
  error: String
}

type ExecutionStepResult {
  stepIndex: Int!
  tool: String!
  params: JSON!
  status: StepStatus!
  result: JSON
  error: String
  startedAt: String
  completedAt: String
  retryCount: Int!
  dependencies: [Int!]!
}

type ExecutionSummary {
  executionId: String!
  planRequestId: String!
  status: ExecutionStatus!
  startedAt: String
  completedAt: String
  totalSteps: Int!
  completedSteps: Int!
  failedSteps: Int!
  error: String
}

type ExecutionStatistics {
  total: Int!
  byStatus: ExecutionStatusCounts!
  averageExecutionTime: Float!
  successRate: Float!
  averageStepsPerExecution: Float!
}

type ExecutionStatusCounts {
  PENDING: Int!
  RUNNING: Int!
  COMPLETED: Int!
  FAILED: Int!
  ROLLED_BACK: Int!
}

input ExecutionConfigInput {
  maxRetries: Int
  retryDelayMs: Int
  enableRollback: Boolean
  continueOnError: Boolean
  parallelExecutionLimit: Int
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  ROLLED_BACK
}

enum StepStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  SKIPPED
}
