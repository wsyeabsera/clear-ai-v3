# GraphQL schema for the Planner Agent

type Mutation {
  """
  Create a new plan for a given query
  """
  createPlan(query: String!, llmProvider: String): PlanResponse!
  
  """
  Delete a plan by request ID
  """
  deletePlan(requestId: String!): Boolean!
  """
  Provide feedback from an analysis to improve future plans
  """
  provideAnalysisFeedback(planRequestId: String!, analysisId: String!): FeedbackResponse!
}

type Query {
  """
  Get a plan by request ID
  """
  getPlan(requestId: String!): PlanResponse
  
  """
  Get plan statistics
  """
  getPlanStatistics: PlanStatistics!
  
  """
  Get recent plans
  """
  getRecentPlans(limit: Int): [PlanSummary!]!
}

type PlanResponse {
  requestId: String!
  query: String!
  plan: Plan!
  status: PlanStatus!
  createdAt: String!
  executionTimeMs: Int
  validationErrors: [String!]!
}

type Plan {
  steps: [PlanStep!]!
  metadata: PlanMetadata!
}

type PlanStep {
  tool: String!
  params: JSON!
  dependsOn: [Int!]!
  parallel: Boolean!
  description: String
}

type PlanMetadata {
  query: String!
  requestId: String!
  estimatedDurationMs: Int
  totalSteps: Int!
  parallelSteps: Int!
}

type PlanSummary {
  requestId: String!
  query: String!
  status: PlanStatus!
  createdAt: String!
  executionTimeMs: Int
}

type PlanStatistics {
  total: Int!
  byStatus: PlanStatusCounts!
  byProvider: [ProviderCount!]!
  averageExecutionTime: Float!
}

type PlanStatusCounts {
  PENDING: Int!
  COMPLETED: Int!
  FAILED: Int!
}

type ProviderCount {
  provider: String!
  count: Int!
}

type FeedbackResponse {
  success: Boolean!
  message: String!
  feedbackId: String!
}

enum PlanStatus {
  PENDING
  COMPLETED
  FAILED
}

scalar JSON
